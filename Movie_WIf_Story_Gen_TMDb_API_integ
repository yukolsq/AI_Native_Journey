import React, { useState } from 'react';

// --- IMPORTANT: Replace with your actual TMDb API key ---
// Get one from themoviedb.org after signing up.
const TMDB_API_KEY = "YOUR_TMDB_API_KEY_HERE";

// Base URLs for APIs
const TMDB_BASE_URL = "https://api.themoviedb.org/3";
const TMDB_IMAGE_BASE_URL = "https://image.tmdb.org/t/p/";
const GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=";
const IMAGEN_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict?key=";

function App() {
    // State variables for application flow and data
    const [searchTerm, setSearchTerm] = useState('');
    const [searchResults, setSearchResults] = useState([]);
    const [selectedMovie, setSelectedMovie] = useState(null); // Stores full TMDb movie details
    const [whatIfPrompt, setWhatIfPrompt] = useState('');
    const [generatedStory, setGeneratedStory] = useState(null); // Stores structured story from Gemini
    const [generatedImages, setGeneratedImages] = useState([]); // Stores base64 image URLs from Imagen

    // Loading states for various operations
    const [isLoading, setIsLoading] = useState(false); // General loading indicator
    const [isSearchingMovies, setIsSearchingMovies] = useState(false);
    const [isGeneratingStory, setIsGeneratingStory] = useState(false);
    const [isGeneratingImages, setIsGeneratingImages] = useState(false);

    const [errorMessage, setErrorMessage] = useState('');

    // Utility function to display messages instead of alerts
    const showMessage = (msg, type = 'error') => {
        setErrorMessage(msg);
        // Clear message after some time
        setTimeout(() => setErrorMessage(''), 5000);
    };

    // --- TMDb API Functions ---
    const searchMovies = async () => {
        setErrorMessage('');
        setSearchResults([]);
        setSelectedMovie(null);
        setGeneratedStory(null);
        setGeneratedImages([]);

        if (!searchTerm.trim()) {
            showMessage("Please enter a movie title to search.", "info");
            return;
        }
        if (!TMDB_API_KEY || TMDB_API_KEY === "YOUR_TMDB_API_KEY_HERE") {
            showMessage("TMDb API key is not set. Please update the code with your key.", "error");
            return;
        }

        setIsSearchingMovies(true);
        setIsLoading(true);
        try {
            const response = await fetch(`${TMDB_BASE_URL}/search/movie?api_key=${TMDB_API_KEY}&query=${encodeURIComponent(searchTerm)}`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();
            if (data.results && data.results.length > 0) {
                setSearchResults(data.results);
            } else {
                showMessage("No movies found for that search term. Try a different title.", "info");
            }
        } catch (error) {
            console.error("Error searching movies:", error);
            showMessage(`Failed to search movies: ${error.message}`, "error");
        } finally {
            setIsSearchingMovies(false);
            setIsLoading(false);
        }
    };

    const selectMovie = async (movie) => {
        setErrorMessage('');
        setSelectedMovie(null); // Clear previous selection
        setGeneratedStory(null);
        setGeneratedImages([]);

        setIsLoading(true);
        try {
            // Fetch full details of the selected movie, including overview
            const response = await fetch(`${TMDB_BASE_URL}/movie/${movie.id}?api_key=${TMDB_API_KEY}`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const details = await response.json();
            setSelectedMovie(details);
            setSearchResults([]); // Clear search results after selection
            setSearchTerm(''); // Clear search term
        } catch (error) {
            console.error("Error fetching movie details:", error);
            showMessage(`Failed to load movie details: ${error.message}`, "error");
            setSelectedMovie(null); // Reset if failed
        } finally {
            setIsLoading(false);
        }
    };

    const getFullPosterUrl = (posterPath, size = "w500") => {
        return posterPath ? `${TMDB_IMAGE_BASE_URL}${size}${posterPath}` : "https://placehold.co/500x750/cccccc/333333?text=No+Poster";
    };

    // --- Gemini API (Text Generation) ---
    const generateStory = async () => {
        setErrorMessage('');
        if (!selectedMovie) {
            showMessage("Please select a movie first.", "info");
            return;
        }
        if (!whatIfPrompt.trim()) {
            showMessage("Please enter your 'What If' idea.", "info");
            return;
        }

        setIsGeneratingStory(true);
        setIsLoading(true);
        setGeneratedStory(null);
        setGeneratedImages([]); // Clear images from previous generation

        const prompt = `
            You are a creative writer specializing in "What If" movie scenarios.
            Given an original movie's title and overview, and a user's "What If" prompt,
            generate a compelling, short "What If" story.

            Original Movie Title: ${selectedMovie.title}
            Original Movie Overview: ${selectedMovie.overview || "No overview available."}
            User's "What If" Idea: ${whatIfPrompt}

            Please provide the output in JSON format with the following structure:
            {
                "whatIfScenarioTitle": "A concise, engaging title for the 'What If' story.",
                "whatIfScenarioPremise": "A single sentence explaining the core 'What If' change.",
                "storyText": "A short, engaging paragraph (approx. 5-7 sentences) detailing the 'What If' story's outcome.",
                "imagePrompts": [
                    "A vivid, descriptive prompt for the first image, based on the story.",
                    "A vivid, descriptive prompt for the second image, capturing another key moment."
                ]
            }
            Ensure the image prompts are highly visual and concise, suitable for an image generation AI.
        `;

        let chatHistory = [{ role: "user", parts: [{ text: prompt }] }];
        const payload = {
            contents: chatHistory,
            generationConfig: {
                responseMimeType: "application/json",
                responseSchema: {
                    type: "OBJECT",
                    properties: {
                        whatIfScenarioTitle: { type: "STRING" },
                        whatIfScenarioPremise: { type: "STRING" },
                        storyText: { type: "STRING" },
                        imagePrompts: { type: "ARRAY", items: { type: "STRING" } }
                    },
                    required: ["whatIfScenarioTitle", "whatIfScenarioPremise", "storyText", "imagePrompts"]
                }
            }
        };

        try {
            const response = await fetch(GEMINI_API_URL, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });
            const result = await response.json();

            if (result.candidates && result.candidates.length > 0 &&
                result.candidates[0].content && result.candidates[0].content.parts &&
                result.candidates[0].content.parts.length > 0) {
                const jsonText = result.candidates[0].content.parts[0].text;
                const parsedStory = JSON.parse(jsonText);
                setGeneratedStory(parsedStory);
                // Immediately proceed to generate images
                if (parsedStory.imagePrompts && parsedStory.imagePrompts.length > 0) {
                    await generateImages(parsedStory.imagePrompts);
                } else {
                    showMessage("Story generated, but no image prompts were returned.", "info");
                }
            } else {
                throw new Error("Invalid response structure from Gemini API.");
            }
        } catch (error) {
            console.error("Error generating story:", error);
            showMessage(`Failed to generate story: ${error.message}. Please try again.`, "error");
        } finally {
            setIsGeneratingStory(false);
            setIsLoading(false);
        }
    };

    // --- Imagen API (Image Generation) ---
    const generateImages = async (prompts) => {
        setErrorMessage('');
        setIsGeneratingImages(true);
        // Do not set general isLoading here, as story generation might still be active
        // and we want separate feedback for images.

        const images = [];
        try {
            for (const prompt of prompts) {
                const payload = { instances: { prompt: prompt }, parameters: { "sampleCount": 1 } };
                const response = await fetch(IMAGEN_API_URL, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                const result = await response.json();

                if (result.predictions && result.predictions.length > 0 && result.predictions[0].bytesBase64Encoded) {
                    const imageUrl = `data:image/png;base64,${result.predictions[0].bytesBase64Encoded}`;
                    images.push(imageUrl);
                } else {
                    console.warn(`Failed to generate image for prompt: "${prompt}"`, result);
                    // Add a placeholder if image generation fails for one prompt
                    images.push("https://placehold.co/400x300/cccccc/333333?text=Image+Gen+Failed");
                }
            }
            setGeneratedImages(images);
        } catch (error) {
            console.error("Error generating images:", error);
            showMessage(`Failed to generate images: ${error.message}.`, "error");
            // Add placeholders if all image generation fails
            setGeneratedImages([
                "https://placehold.co/400x300/cccccc/333333?text=Image+Gen+Failed",
                "https://placehold.co/400x300/cccccc/333333?text=Image+Gen+Failed"
            ]);
        } finally {
            setIsGeneratingImages(false);
        }
    };

    return (
        <div className="min-h-screen bg-gradient-to-br from-gray-900 to-indigo-900 text-gray-100 p-4 font-inter">
            <script src="https://cdn.tailwindcss.com"></script>
            <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet" />

            <style>{`
                .font-inter {
                    font-family: 'Inter', sans-serif;
                }
                /* Custom scrollbar for better aesthetics */
                ::-webkit-scrollbar {
                    width: 8px;
                    background-color: #2d3748; /* bg-gray-800 */
                }
                ::-webkit-scrollbar-thumb {
                    background-color: #4a5568; /* bg-gray-700 */
                    border-radius: 4px;
                }
                ::-webkit-scrollbar-thumb:hover {
                    background-color: #616e84; /* bg-gray-600 */
                }
            `}</style>

            <div className="max-w-4xl mx-auto bg-gray-800 rounded-xl shadow-2xl p-6 md:p-10 my-8">
                <h1 className="text-4xl md:text-5xl font-bold text-center mb-6 text-indigo-400">
                    Movie What If Story Generator
                </h1>
                <p className="text-center text-gray-400 mb-8">
                    Discover alternate realities for your favorite films!
                </p>

                {/* Error/Info Message Display */}
                {errorMessage && (
                    <div className="bg-red-700 text-white p-4 rounded-lg mb-6 shadow-md text-center">
                        {errorMessage}
                    </div>
                )}

                {/* Movie Search Section */}
                <section className="mb-8 p-6 bg-gray-700 rounded-lg shadow-inner">
                    <h2 className="text-2xl font-semibold mb-4 text-indigo-300">1. Find Your Movie</h2>
                    <div className="flex flex-col sm:flex-row gap-4">
                        <input
                            type="text"
                            placeholder="e.g., Inception, Star Wars, Titanic"
                            className="flex-grow p-3 rounded-lg bg-gray-900 text-gray-100 border border-gray-600 focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition duration-200"
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                            onKeyPress={(e) => e.key === 'Enter' && searchMovies()}
                            disabled={isLoading}
                        />
                        <button
                            onClick={searchMovies}
                            className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-3 px-6 rounded-lg shadow-md transition duration-300 transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"
                            disabled={isSearchingMovies || isLoading}
                        >
                            {isSearchingMovies ? (
                                <svg className="animate-spin h-5 w-5 mr-3 text-white" viewBox="0 0 24 24">
                                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                            ) : (
                                "Search Movie"
                            )}
                        </button>
                    </div>

                    {searchResults.length > 0 && (
                        <div className="mt-6">
                            <h3 className="text-xl font-medium mb-3 text-gray-200">Select a Movie:</h3>
                            <div className="max-h-60 overflow-y-auto pr-2">
                                {searchResults.map((movie) => (
                                    <div
                                        key={movie.id}
                                        className="flex items-center bg-gray-800 p-3 rounded-lg mb-2 cursor-pointer hover:bg-gray-700 transition duration-200 shadow"
                                        onClick={() => selectMovie(movie)}
                                    >
                                        <img
                                            src={getFullPosterUrl(movie.poster_path, "w92")}
                                            alt={`${movie.title} poster`}
                                            className="w-12 h-18 rounded-md mr-4 flex-shrink-0"
                                            onError={(e) => { e.target.onerror = null; e.target.src = "https://placehold.co/92x138/cccccc/333333?text=No+Poster"; }}
                                        />
                                        <div>
                                            <p className="font-semibold text-lg text-white">{movie.title}</p>
                                            <p className="text-sm text-gray-400">{movie.release_date ? `(${new Date(movie.release_date).getFullYear()})` : ''}</p>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>
                    )}
                </section>

                {/* Selected Movie & What If Prompt Section */}
                {selectedMovie && (
                    <section className="mb-8 p-6 bg-gray-700 rounded-lg shadow-inner flex flex-col md:flex-row items-center gap-6">
                        <div className="flex-shrink-0">
                            <img
                                src={getFullPosterUrl(selectedMovie.poster_path)}
                                alt={`${selectedMovie.title} poster`}
                                className="w-48 h-auto rounded-lg shadow-lg border border-gray-600"
                                onError={(e) => { e.target.onerror = null; e.target.src = "https://placehold.co/500x750/cccccc/333333?text=No+Poster"; }}
                            />
                        </div>
                        <div className="flex-grow text-center md:text-left">
                            <h2 className="text-3xl font-bold text-indigo-300 mb-2">{selectedMovie.title}</h2>
                            <p className="text-gray-400 mb-4 text-sm italic">Released: {selectedMovie.release_date}</p>
                            <p className="text-gray-300 mb-4">{selectedMovie.overview}</p>

                            <h3 className="text-xl font-semibold mb-3 text-gray-200">2. Your "What If" Idea:</h3>
                            <textarea
                                className="w-full p-3 rounded-lg bg-gray-900 text-gray-100 border border-gray-600 focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition duration-200 resize-y min-h-[80px]"
                                placeholder="e.g., What if the Titanic never hit an iceberg? What if Batman retired?"
                                value={whatIfPrompt}
                                onChange={(e) => setWhatIfPrompt(e.target.value)}
                                disabled={isLoading}
                            ></textarea>
                            <button
                                onClick={generateStory}
                                className="mt-4 bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg shadow-md transition duration-300 transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed w-full flex items-center justify-center"
                                disabled={isGeneratingStory || isGeneratingImages || isLoading || !whatIfPrompt.trim()}
                            >
                                {(isGeneratingStory || isGeneratingImages) ? (
                                    <>
                                        <svg className="animate-spin h-5 w-5 mr-3 text-white" viewBox="0 0 24 24">
                                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                        </svg>
                                        {isGeneratingStory ? "Generating Story..." : "Generating Images..."}
                                    </>
                                ) : (
                                    "Generate What If Story & Images"
                                )}
                            </button>
                        </div>
                    </section>
                )}

                {/* Generated Story & Images Section */}
                {generatedStory && (
                    <section className="p-6 bg-gray-700 rounded-lg shadow-inner">
                        <h2 className="text-2xl font-semibold mb-4 text-indigo-300 text-center">3. Your What If Story</h2>
                        <h3 className="text-3xl font-bold text-center text-white mb-3">{generatedStory.whatIfScenarioTitle}</h3>
                        <p className="text-center text-gray-400 italic mb-6">
                            Original: {selectedMovie ? selectedMovie.title : 'N/A'}
                        </p>
                        <p className="text-lg text-gray-200 leading-relaxed mb-6">
                            <span className="font-semibold text-indigo-200">Premise:</span> {generatedStory.whatIfScenarioPremise}
                            <br/><br/>
                            {generatedStory.storyText}
                        </p>

                        <div className="mt-8">
                            <h3 className="text-xl font-semibold mb-4 text-gray-200 text-center">Images from your What If:</h3>
                            <div className="flex flex-col md:flex-row justify-center gap-6">
                                {isGeneratingImages ? (
                                    <div className="flex items-center justify-center p-8 bg-gray-800 rounded-lg shadow-md w-full md:w-1/2 min-h-[200px]">
                                        <svg className="animate-spin h-8 w-8 text-indigo-400" viewBox="0 0 24 24">
                                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                        </svg>
                                        <span className="ml-3 text-indigo-300">Generating Images...</span>
                                    </div>
                                ) : (
                                    generatedImages.map((imgSrc, index) => (
                                        <div key={index} className="w-full md:w-1/2 flex justify-center">
                                            <img
                                                src={imgSrc}
                                                alt={`Generated scene ${index + 1}`}
                                                className="w-full max-w-sm h-auto rounded-lg shadow-xl border border-gray-600 object-cover"
                                                style={{ aspectRatio: '4/3' }}
                                            />
                                        </div>
                                    ))
                                )}
                            </div>
                        </div>
                    </section>
                )}
            </div>
        </div>
    );
}

export default App;
